#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require("../app");
const constants = require("../Constants");

var debug = require("debug")("webapp:server");
var http = require("http");
const https = require("https"); //gives an error in heroku after deploying so turning it off
const tls = require("node:tls");
const fs = require("fs");

/**
 * Create HTTP server.
 */

let server;

const certOptions = {
  SNICallback: (domainName, cb) => {
    const foundDomain = constants.LETSENCRYPT_DOMAINS.find(
      (d) => d === domainName
    );
    if (foundDomain) {
      cb(
        null,
        tls.createSecureContext({
          key: fs.readFileSync(
            `/etc/letsencrypt/live/${foundDomain}/privkey.pem`
          ),
          cert: fs.readFileSync(
            `/etc/letsencrypt/live/${foundDomain}/fullchain.pem`
          ),
        })
      );
    } else {
      cb(
        null,
        tls.createSecureContext({
          key: fs.readFileSync(
            `/etc/letsencrypt/live/${constants.LETSENCRYPT_DOMAIN_NAME}/privkey.pem`
          ),
          cert: fs.readFileSync(
            `/etc/letsencrypt/live/${constants.LETSENCRYPT_DOMAIN_NAME}/fullchain.pem`
          ),
        })
      );
    }
  },
};

if (process.env.NODE_ENV === "production") {
  server = https.createServer(
    certOptions,
    /*{
      key: fs.readFileSync(
        `/etc/letsencrypt/live/${constants.LETSENCRYPT_DOMAIN_NAME}/privkey.pem`
      ),
      cert: fs.readFileSync(
        `/etc/letsencrypt/live/${constants.LETSENCRYPT_DOMAIN_NAME}/fullchain.pem`
      ),
    }*/ app
  );
} else {
  server = http.createServer(app);
}

/**
 * Listen on provided port, on all network interfaces.
 */

const socketController = require("../controllers/SocketController");
socketController.handleSocketIO(server);

const { ExpressPeerServer } = require("peer");
const peerServer = ExpressPeerServer(server, {
  debug: true,
  /** the following corsOptions are the default options set by
   * cors package, however peerServer default is {origin: true} */
  corsOptions: {
    origin: "*",
    methods: "GET,HEAD,PUT,PATCH,POST,DELETE",
    preflightContinue: false,
    optionsSuccessStatus: 204,
  },
});

const { setRoutes } = require("../setRoutes");
setRoutes(app, peerServer);

/**
 * Get port from environment and store in Express.
 */

var port;

if (process.env.NODE_ENV === "production") {
  port = normalizePort(process.env.PORT || "443");
} else {
  port = normalizePort(process.env.PORT || "5000");
}
app.set("port", port);

server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Redirect from http port 80 to https
if (process.env.NODE_ENV === "production") {
  http
    .createServer(function (req, res) {
      res.writeHead(301, {
        Location: "https://" + req.headers["host"] + req.url,
      });
      res.end();
    })
    .listen(80);
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
